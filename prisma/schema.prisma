  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
  }

  enum Role {
    student
    maintainer
    leadMaintainer
    admin
  }

  model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    password      String?

    role          Role            @default(student)
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]
    tickets       Ticket[] @relation("TicketUser")
    assignedTickets Ticket[] @relation("AssignedTickets")
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }
  
  model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    @@unique([provider, providerAccountId])
  }
  
  model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }
  
  model VerificationToken {
    identifier String
    token      String
    expires    DateTime
  
    @@unique([identifier, token])
  }
  
  // Optional for WebAuthn support
  model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
  
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
    @@id([userId, credentialID])
  }

  model Ticket {
    id               String   @id @default(cuid())
    title            String
    description      String
    userId           String
    assignedUserId   String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    user User @relation("TicketUser", fields: [userId], references: [id], onDelete: Cascade)
    assignedUser User? @relation("AssignedTickets", fields: [assignedUserId], references: [id], onDelete: SetNull)
  }
