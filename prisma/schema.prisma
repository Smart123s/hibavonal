// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  maintainer
  leadMaintainer
  admin
}

enum RoomType {
  Private
  Public
}

enum RequestState {
  Requested
  UnderProcurement
  Done
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?

  role            Role            @default(student)
  image           String?
  accounts        Account[]
  sessions        Session[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]
  tickets         Ticket[]        @relation("TicketUser")
  TicketComment TicketComment[]
  assignedTickets Ticket[]        @relation("AssignedTickets")

  rooms     Room[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Ticket {
  id             String   @id @default(cuid())
  title          String
  description    String
  userId         String
  assignedUserId String?
  typeId         String?
  roomId         String?
  errorTypeId    String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  comments TicketComment[]
  type     TicketType?     @relation(fields: [typeId], references: [id])

  user         User  @relation("TicketUser", fields: [userId], references: [id], onDelete: Cascade)
  assignedUser User? @relation("AssignedTickets", fields: [assignedUserId], references: [id], onDelete: SetNull)
  room         Room?  @relation("TicketRoom", fields: [roomId], references: [id], onDelete: SetNull)

  errorType ErrorType? @relation(fields: [errorTypeId], references: [id], onDelete: SetNull)
}

model TicketType {
  id               String @id @default(cuid())
  name             String
  builtIn          Boolean @default(false)
  color            String @default("#17C5C5")
  allowsCommenting Boolean @default(true)

  tickets Ticket[]
}

model TicketComment {
  id       String @id @default(cuid())
  ticketId String
  userId   String
  content  String

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("ticket_comments")
}

model Room {
  id         String @id @default(cuid())

  level Int
  name  String

  roomType   RoomType        @default(Public)
  users      User[]
  equipments RoomEquipment[]

  tickets Ticket[] @relation("TicketRoom")
}

model RoomEquipment {
  name       String
  locationId String
  requestId  String @unique

  request  EquipmentRequest? @relation(fields: [requestId], references: [id])
  location Room              @relation(fields: [locationId], references: [id])

  @@id([name, locationId])
}

model EquipmentRequest {
  id          String @id @default(cuid())
  ticketId    String
  equipmentId String

  alias String
  state RequestState @default(Requested)

  equipment RoomEquipment?
}

model ErrorType{
  id          String @id @default(cuid())
  name        String
  severity    Int

  ticket   Ticket? @relation
}